[
  {
    "objectID": "Model.html",
    "href": "Model.html",
    "title": "Penguins Model",
    "section": "",
    "text": "from palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model\nfrom sklearn import tree\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "Model.html#penguin-size-and-mass-by-sex-and-species",
    "href": "Model.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins Model",
    "section": "",
    "text": "from palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import linear_model\nfrom sklearn import tree\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "Model.html#get-data",
    "href": "Model.html#get-data",
    "title": "Penguins Model",
    "section": "Get Data",
    "text": "Get Data\n\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "Model.html#define-model-and-fit",
    "href": "Model.html#define-model-and-fit",
    "title": "Penguins Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\n\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)\n\nmodel2 = linear_model.Ridge(alpha=0).fit(X,y)\n\nmodel3 = tree.DecisionTreeRegressor().fit(X,y)"
  },
  {
    "objectID": "Model.html#get-some-information",
    "href": "Model.html#get-some-information",
    "title": "Penguins Model",
    "section": "Get some information",
    "text": "Get some information\n\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393996\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]\n\n\n\nfrom vetiver import VetiverModel\nfrom vetiver import vetiver_pin_write\nfrom vetiver import VetiverAPI\nimport pins\n\nv = VetiverModel(model, model_name = 'penguin_model', prototype_data = X)\nb = pins.board_folder('data/model', allow_pickle_read=True)\nvetiver_pin_write(b, v)\nv = VetiverModel.from_pin(b, 'penguin_model')\napp = VetiverAPI(v, check_prototype=True)\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240419T170236Z-aa876\n\n\n\nimport duckdb\n\ncon = duckdb.connect('my-db.duckdb')\ndf = con.execute(\"SELECT * FROM penguins\").fetchdf().dropna()\ncon.close()"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(tidymodels)\nlibrary(xgboost)  \nlibrary(discrim)\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\ntheme_set(theme_classic())\ntidymodels_prefer()\n\n\n\n\nCode\n?palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "EDA.html#penguin-size-and-mass-by-sex-and-species",
    "href": "EDA.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(tidymodels)\nlibrary(xgboost)  \nlibrary(discrim)\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\ntheme_set(theme_classic())\ntidymodels_prefer()\n\n\n\n\nCode\n?palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "EDA.html#penguin-size-vs-mass-by-species",
    "href": "EDA.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\n\nCode\nlm_spec &lt;- linear_reg() |&gt;\n  set_mode(\"regression\") |&gt;\n  set_engine(\"lm\")\n\nlm_fit &lt;- lm_spec |&gt;\n  fit(body_mass_g ~ ., data = df)\n\ntidy(lm_fit)\n\n\n# A tibble: 10 × 5\n   term              estimate std.error statistic  p.value\n   &lt;chr&gt;                &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n 1 (Intercept)        84088.   41912.       2.01  4.57e- 2\n 2 speciesChinstrap    -283.      88.8     -3.18  1.60e- 3\n 3 speciesGentoo        891.     145.       6.16  2.12e- 9\n 4 islandDream          -21.2     58.4     -0.363 7.17e- 1\n 5 islandTorgersen      -58.8     60.9     -0.966 3.35e- 1\n 6 bill_length_mm        19.0      7.11     2.67  8.05e- 3\n 7 bill_depth_mm         60.8     20.0      3.04  2.56e- 3\n 8 flipper_length_mm     18.5      3.13     5.91  8.46e- 9\n 9 sexmale              379.      48.1      7.88  4.95e-14\n10 year                 -42.8     20.9     -2.04  4.19e- 2\n\n\nCode\nglance(lm_fit)\n\n\n# A tibble: 1 × 12\n  r.squared adj.r.squared sigma statistic   p.value    df logLik   AIC   BIC\n      &lt;dbl&gt;         &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n1     0.877         0.873  287.      255. 4.09e-141     9 -2351. 4725. 4767.\n# ℹ 3 more variables: deviance &lt;dbl&gt;, df.residual &lt;int&gt;, nobs &lt;int&gt;\n\n\nCode\nlm_fit |&gt;\n  extract_fit_engine() |&gt;\n  plot()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npenguins_split &lt;- initial_split(df, prop = 0.8)\npenguins_train &lt;- training(penguins_split)\npenguins_test &lt;- testing(penguins_split)\n\nlda_spec &lt;- discrim_linear() |&gt;\n  set_mode(\"classification\") |&gt;\n  set_engine(\"MASS\")\n\nlda_fit &lt;- lda_spec |&gt;\n  fit(species ~ body_mass_g, data = penguins_train)\n\nlda_fit_preds_test &lt;- augment(lda_fit , new_data = penguins_test) |&gt;\n  select(species, body_mass_g, .pred_class, .pred_Adelie, .pred_Chinstrap, .pred_Gentoo)\n\nlr_metrics &lt;- metric_set(accuracy, sensitivity, specificity, ppv)\n\nlda_fit_preds_test |&gt;\n  lr_metrics(truth = species, estimate = .pred_class, event_level = \"second\")\n\n\n# A tibble: 4 × 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy    multiclass     0.783\n2 sensitivity macro          0.595\n3 specificity macro          0.865\n4 ppv         macro         NA    \n\n\n\n\nCode\nboost_spec &lt;- boost_tree(trees = 5000, tree_depth = 4) %&gt;%\n  set_engine(\"xgboost\") %&gt;%\n  set_mode(\"classification\")\n\nboost_fit &lt;- boost_spec |&gt;\n  fit(species ~ body_mass_g, data = penguins_train)\n\naugment(boost_fit, new_data = penguins_test) |&gt;\n  accuracy(truth = species, estimate = .pred_class)\n\n\n# A tibble: 1 × 3\n  .metric  .estimator .estimate\n  &lt;chr&gt;    &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy multiclass     0.754\n\n\n\n\nCode\nset.seed(2112) \npenguins_folds &lt;- vfold_cv(df, v = 5) \n\n#| cache: true\nlm_spec %&gt;%   \n  fit_resamples(body_mass_g ~ species, resamples = penguins_folds, \n                metrics = metric_set(rmse, rsq)) %&gt;%   \n  collect_metrics()\n\n\n# A tibble: 2 × 6\n  .metric .estimator    mean     n std_err .config             \n  &lt;chr&gt;   &lt;chr&gt;        &lt;dbl&gt; &lt;int&gt;   &lt;dbl&gt; &lt;chr&gt;               \n1 rmse    standard   464.        5 11.8    Preprocessor1_Model1\n2 rsq     standard     0.674     5  0.0144 Preprocessor1_Model1\n\n\n\n\nCode\nlibrary(dbplyr)\ncon &lt;- DBI::dbConnect(duckdb::duckdb(), dbdir = \"my-db.duckdb\")\nDBI::dbWriteTable(con, \"penguins\", palmerpenguins::penguins, overwrite = TRUE)\n\ncon &lt;- DBI::dbConnect(\n  duckdb::duckdb(), \n  dbdir = \"my-db.duckdb\"\n  )\ndf &lt;- dplyr::tbl(con, \"penguins\")\n\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n        ends_with(\"mm\") | ends_with(\"g\"),\n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  dplyr::collect() %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by \"species\". You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\n\n\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n\n\n\n\n\nCode\nDBI::dbDisconnect(con, shutdown = TRUE)"
  }
]